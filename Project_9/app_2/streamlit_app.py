import os
import sys
import requests
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import io
import base64
import pickle

# Configuration de l'API
API_BASE_URL = os.getenv("MULTISEG_API_BASE_URL", "http://127.0.0.1:8080/api")

# Import des fonctions utils pour l'affichage local
sys.path.append('/app')
sys.path.append('.')
from utils.utils import colorize_mask

# Configuration de la page
st.set_page_config(
    page_title="Street Vision - Segmentation Comparison",
    page_icon="üöó",
    layout="wide"
)

# CSS personnalis√© mis √† jour
st.markdown("""
<style>
.main-header {
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 10px;
    margin-bottom: 2rem;
    color: white;
    text-align: center;
}
.comparison-card {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    padding: 1.5rem;
    border-radius: 10px;
    border-left: 4px solid #667eea;
    margin: 1rem 0;
    color: #2c3e50;
    font-weight: 500;
}
.speed-winner {
    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
    border-left-color: #28a745;
}
.speed-slower {
    background: linear-gradient(135deg, #f8d7da 0%, #f1b0b7 100%);
    border-left-color: #dc3545;
}
.metric-card {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    margin: 0.5rem 0;
    color: #2c3e50;
    font-weight: 500;
}
.dataset-info {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 10px;
    margin: 1rem 0;
    border-left: 4px solid #17a2b8;
}
.preprocessing-card {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    padding: 1rem;
    border-radius: 8px;
    margin: 0.5rem 0;
    border-left: 4px solid #2196f3;
}
</style>
""", unsafe_allow_html=True)

# En-t√™te principal
st.markdown("""
<div class="main-header">
    <h1>üöó Street Vision - Comparaison de Mod√®les</h1>
    <p>√âvaluation comparative SegFormer vs FPN sur le dataset Cityscapes</p>
</div>
""", unsafe_allow_html=True)

# Fonctions utilitaires
def get_models_info():
    """R√©cup√®re les informations des deux mod√®les"""
    try:
        response = requests.get(f"{API_BASE_URL}/models")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur lors de la r√©cup√©ration des infos mod√®les: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API: {e}")
        return None

def get_dataset_info():
    """R√©cup√®re les informations sur le dataset"""
    try:
        response = requests.get(f"{API_BASE_URL}/dataset-info")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur lors de la r√©cup√©ration des infos dataset: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API: {e}")
        return None

def get_train_images():
    """R√©cup√®re la liste des images d'entra√Ænement"""
    try:
        response = requests.get(f"{API_BASE_URL}/train-images")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur lors de la r√©cup√©ration des images: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API: {e}")
        return None

def get_class_repartition():
    """R√©cup√®re le graphique de r√©partition des classes"""
    try:
        response = requests.get(f"{API_BASE_URL}/class-repartition", timeout=10)
        if response.status_code == 200:
            return response.content
        else:
            return None
    except Exception as e:
        st.warning(f"Graphique de r√©partition non disponible: {e}")
        return None

def preprocess_train_image(filename, apply_augmentation=False):
    """Lance le preprocessing sur une image d'entra√Ænement"""
    try:
        data = {
            "filename": filename,
            "apply_augmentation": apply_augmentation
        }
        response = requests.post(
            f"{API_BASE_URL}/preprocess-train-image",
            json=data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Erreur lors du preprocessing: {e}")
        return None

def get_sample_images():
    """R√©cup√®re la liste des images d'exemple"""
    try:
        response = requests.get(f"{API_BASE_URL}/sample-images")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur lors de la r√©cup√©ration des images: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API: {e}")
        return None

def compare_sample_image(filename):
    """Lance une comparaison sur une image d'exemple"""
    try:
        data = {"filename": filename}
        response = requests.post(
            f"{API_BASE_URL}/compare-sample", 
            json=data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Erreur lors de la comparaison: {e}")
        return None
    
def compare_uploaded_image(uploaded_file):
    """Lance une comparaison sur une image upload√©e"""
    try:
        files = {"file": (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
        response = requests.post(f"{API_BASE_URL}/compare-upload", files=files)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Erreur lors de la comparaison: {e}")
        return None

def display_comparison_results(result, models_info):
    """Affiche les r√©sultats de comparaison entre les deux mod√®les"""
    if not result or not result['success']:
        st.error("Aucun r√©sultat de comparaison disponible")
        return
    
    # Informations des mod√®les
    st.markdown("### üèÜ Mod√®les Compar√©s")
    
    col1, col2 = st.columns(2)
    
    with col1:
        model1 = result['model1_info']
        # Formater les m√©triques s√©par√©ment
        miou1 = f"{model1.get('test_mean_iou'):.4f}" if model1.get('test_mean_iou') is not None else 'N/A'
        acc1 = f"{model1.get('test_accuracy'):.4f}" if model1.get('test_accuracy') is not None else 'N/A'
        
        st.markdown(f"""
        <div class="comparison-card">
            <h4>ü•á Mod√®le #1</h4>
            <strong>{model1.get('architecture', 'N/A')} - {model1['encoder_name']}</strong><br>
            üìê Taille: {model1['input_size']}<br>
            üìä mIoU: {miou1}<br>
            üéØ Accuracy: {acc1}
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        model2 = result['model2_info']
        # Formater les m√©triques s√©par√©ment
        miou2 = f"{model2.get('test_mean_iou'):.4f}" if model2.get('test_mean_iou') is not None else 'N/A'
        acc2 = f"{model2.get('test_accuracy'):.4f}" if model2.get('test_accuracy') is not None else 'N/A'
        
        st.markdown(f"""
        <div class="comparison-card">
            <h4>ü•à Mod√®le #2</h4>
            <strong>{model2.get('architecture', 'N/A')} - {model2['encoder_name']}</strong><br>
            üìê Taille: {model2['input_size']}<br>
            üìä mIoU: {miou2}<br>
            üéØ Accuracy: {acc2}
        </div>
        """, unsafe_allow_html=True)
    
    # Comparaison des temps d'inf√©rence
    st.markdown("### ‚è±Ô∏è Comparaison des Performances")
    
    speed_comp = result['speed_comparison']
    model1_time = result['model1_inference_time'] * 1000
    model2_time = result['model2_inference_time'] * 1000
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        winner_class = "speed-winner" if speed_comp['faster_model'] == model1['encoder_name'] else "speed-slower"
        st.markdown(f"""
        <div class="comparison-card {winner_class}">
            <h5>ü•á {model1.get('architecture', 'N/A')} - {model1['encoder_name']}</h5>
            <strong>{model1_time:.1f} ms</strong>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="comparison-card">
            <h5>‚ö° Comparaison</h5>
            <strong>{speed_comp['faster_model']}</strong><br>
            est {speed_comp['speedup_ratio']}x plus rapide<br>
            <small>Diff√©rence: {speed_comp['time_difference_ms']:.1f} ms</small>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        winner_class = "speed-winner" if speed_comp['faster_model'] == model2['encoder_name'] else "speed-slower"
        st.markdown(f"""
        <div class="comparison-card {winner_class}">
            <h5>ü•à {model2.get('architecture', 'N/A')} - {model2['encoder_name']}</h5>
            <strong>{model2_time:.1f} ms</strong>
        </div>
        """, unsafe_allow_html=True)
    
    # Affichage des segmentations
    if result.get('figure_data'):
        st.markdown("### üé® R√©sultats de Segmentation")
        try:
            fig_bytes = base64.b64decode(result['figure_data'])
            fig = pickle.loads(fig_bytes)
            st.pyplot(fig)
            plt.close(fig)
        except Exception as e:
            st.error(f"Erreur lors de l'affichage: {e}")
    
    # Comparaison des statistiques
    st.markdown("### üìä R√©partition des classes par mod√®le")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if result.get('model1_stats'):
            display_model_stats_chart(result['model1_stats'], models_info, f"{model1.get('architecture', 'N/A')} - {model1['encoder_name']}")
    
    with col2:
        if result.get('model2_stats'):
            display_model_stats_chart(result['model2_stats'], models_info, f"{model2.get('architecture', 'N/A')} - {model2['encoder_name']}")
    
    # Analyse comparative des classes
    if result.get('model1_stats') and result.get('model2_stats'):
        display_class_comparison(result['model1_stats'], result['model2_stats'], model1, model2, models_info)

def display_model_stats_chart(stats, models_info, title):
    """Affiche les statistiques d'un mod√®le sous forme de graphique"""
    if not stats:
        st.warning("Aucune statistique disponible")
        return
    
    # Utiliser l'ordre des classes du mod√®le pour la coh√©rence
    if models_info and 'class_names' in models_info:
        # Ordonner selon l'ordre du mod√®le
        ordered_class_names = [name for name in models_info['class_names'] if name in stats]
    else:
        # Fallback : ordre alphab√©tique
        ordered_class_names = sorted(stats.keys())
    
    percentages = [stats[name]['percentage'] for name in ordered_class_names]
    
    # R√©cup√©rer les couleurs des classes
    colors = []
    if models_info and 'class_colors' in models_info and 'class_names' in models_info:
        model_class_names = models_info['class_names']
        model_class_colors = models_info['class_colors']
        
        for class_name in ordered_class_names:
            try:
                idx = model_class_names.index(class_name)
                color = model_class_colors[idx]
                colors.append([c/255.0 for c in color])
            except (ValueError, IndexError):
                colors.append([0.5, 0.5, 0.5])
    else:
        colors = plt.cm.Set3(np.linspace(0, 1, len(ordered_class_names)))
    
    # Cr√©er le graphique
    fig, ax = plt.subplots(figsize=(8, 5))
    
    bars = ax.bar(ordered_class_names, percentages, color=colors, alpha=0.8, edgecolor='white', linewidth=1)
    
    ax.set_xlabel('Classes de Segmentation', fontsize=10, fontweight='bold')
    ax.set_ylabel('Pourcentage (%)', fontsize=10, fontweight='bold')
    ax.set_title(title, fontsize=11, fontweight='bold', pad=15)
    
    # Rotation des labels selon le nombre de classes
    if len(ordered_class_names) <= 4:
        plt.xticks(rotation=0, ha='center', fontsize=9)
    elif len(ordered_class_names) <= 6:
        plt.xticks(rotation=30, ha='right', fontsize=8)
    else:
        plt.xticks(rotation=45, ha='right', fontsize=8)
    
    plt.yticks(fontsize=9)
    
    # Valeurs sur les barres
    for bar, percentage in zip(bars, percentages):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + max(percentages) * 0.01,
               f'{percentage:.1f}%',
               ha='center', va='bottom', fontsize=8, fontweight='bold')
    
    plt.tight_layout()
    ax.grid(axis='y', alpha=0.2, linestyle='--')
    ax.set_axisbelow(True)
    
    # Style des axes
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    # Couleur de fond
    fig.patch.set_facecolor('white')
    ax.set_facecolor('#fafafa')
    
    st.pyplot(fig)
    plt.close(fig)

def display_class_comparison(stats1, stats2, model1, model2, models_info):
    """Affiche une comparaison d√©taill√©e des classes entre les deux mod√®les"""
    st.markdown("### üîç Analyse Comparative par Classe")
    
    # Utiliser l'ordre des classes du mod√®le pour la coh√©rence
    if models_info and 'class_names' in models_info:
        # Combiner toutes les classes pr√©sentes en conservant l'ordre du mod√®le
        all_classes_in_stats = set(stats1.keys()) | set(stats2.keys())
        ordered_all_classes = [name for name in models_info['class_names'] if name in all_classes_in_stats]
    else:
        # Fallback : ordre alphab√©tique
        all_classes = set(stats1.keys()) | set(stats2.keys())
        ordered_all_classes = sorted(all_classes)
    
    comparison_data = []
    for class_name in ordered_all_classes:
        pct1 = stats1.get(class_name, {}).get('percentage', 0)
        pct2 = stats2.get(class_name, {}).get('percentage', 0)
        diff = pct1 - pct2
        
        comparison_data.append({
            'class': class_name,
            'model1_pct': pct1,
            'model2_pct': pct2,
            'difference': diff
        })
    
    # Cr√©er un graphique comparatif des barres
    st.markdown("**üìä Comparaison des classes entre les mod√®les:**")
    
    # Pr√©paration des donn√©es
    class_names = [data['class'] for data in comparison_data]
    model1_values = [data['model1_pct'] for data in comparison_data]
    model2_values = [data['model2_pct'] for data in comparison_data]
    
    # R√©cup√©rer les couleurs des classes
    colors = []
    if models_info and 'class_colors' in models_info and 'class_names' in models_info:
        model_class_names = models_info['class_names']
        model_class_colors = models_info['class_colors']
        
        for class_name in class_names:
            try:
                idx = model_class_names.index(class_name)
                color = model_class_colors[idx]
                hex_color = f"#{color[0]:02x}{color[1]:02x}{color[2]:02x}"
                colors.append(hex_color)
            except (ValueError, IndexError):
                colors.append("#999999")
    else:
        colors = ['#999999'] * len(class_names)
    
    # Cr√©er le graphique comparatif
    fig, ax = plt.subplots(figsize=(12, 7))
    
    x = np.arange(len(class_names))  # Positions des barres
    width = 0.35  # Largeur des barres
    
    bars1 = ax.bar(x - width/2, model1_values, width, label=f"{model1.get('architecture', 'N/A')} - {model1['encoder_name']}", 
                  color=colors, alpha=0.8, edgecolor='white')
    
    # Barres hachur√©es pour le mod√®le 2
    bars2 = ax.bar(x + width/2, model2_values, width, label=f"{model2.get('architecture', 'N/A')} - {model2['encoder_name']}", 
                  color=colors, alpha=0.6, edgecolor='white', hatch='///')
    
    ax.set_xlabel('Classes', fontsize=11, fontweight='bold')
    ax.set_ylabel('Pourcentage (%)', fontsize=11, fontweight='bold')
    ax.set_title('Comparaison des classes entre les deux mod√®les', fontsize=13, fontweight='bold', pad=15)
    ax.set_xticks(x)
    
    # Rotation des labels selon le nombre de classes
    if len(class_names) <= 4:
        ax.set_xticklabels(class_names, fontsize=10)
    elif len(class_names) <= 6:
        ax.set_xticklabels(class_names, rotation=30, ha='right', fontsize=9)
    else:
        ax.set_xticklabels(class_names, rotation=45, ha='right', fontsize=9)
    
    ax.legend(loc='upper right', fontsize=10)
    ax.grid(axis='y', alpha=0.2, linestyle='--')
    ax.set_axisbelow(True)
    
    # Style des axes
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    # Valeurs sur les barres
    for bar1, bar2, val1, val2 in zip(bars1, bars2, model1_values, model2_values):
        height1 = bar1.get_height()
        height2 = bar2.get_height()
        ax.text(bar1.get_x() + bar1.get_width()/2., height1 + 0.5,
               f'{val1:.1f}%', ha='center', va='bottom', fontsize=8, fontweight='bold')
        ax.text(bar2.get_x() + bar2.get_width()/2., height2 + 0.5,
               f'{val2:.1f}%', ha='center', va='bottom', fontsize=8, fontweight='bold')
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)
    
    # Tableau d√©taill√© avec un beau format
    st.markdown("**üîé D√©tails des diff√©rences par classe:**")
    
    # Pr√©parer les donn√©es pour le tableau
    table_data = []
    for i, data in enumerate(comparison_data):
        class_color = colors[i]
        diff_value = data['difference']
        
        # Classification de la diff√©rence
        if abs(diff_value) < 1:
            diff_category = "Similaire"
            diff_emoji = "üü¢"
        elif abs(diff_value) < 5:
            diff_category = "Diff√©rence mod√©r√©e"
            diff_emoji = "üü°"
        else:
            diff_category = "Diff√©rence importante"
            diff_emoji = "üî¥"
        
        table_data.append({
            "Classe": data['class'],
            f"ü•á {model1.get('architecture', 'N/A')[:15]} (%)": f"{data['model1_pct']:.1f}%",
            f"ü•à {model2.get('architecture', 'N/A')[:15]} (%)": f"{data['model2_pct']:.1f}%",
            "Diff√©rence": f"{diff_value:+.1f}%",
            "Cat√©gorie": f"{diff_emoji} {diff_category}"
        })
    
    # Cr√©er le DataFrame et l'afficher
    df = pd.DataFrame(table_data)
    
    # Utiliser st.dataframe avec style personnalis√©
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Classe": st.column_config.TextColumn("üéØ Classe", width="medium"),
            f"ü•á {model1.get('architecture', 'N/A')[:15]} (%)": st.column_config.TextColumn(width="medium"),
            f"ü•à {model2.get('architecture', 'N/A')[:15]} (%)": st.column_config.TextColumn(width="medium"),
            "Diff√©rence": st.column_config.TextColumn("üìä Diff√©rence", width="small"),
            "Cat√©gorie": st.column_config.TextColumn("üìà √âvaluation", width="medium")
        }
    )

# Onglets principaux
main_tab1, main_tab2 = st.tabs(["üìä Pr√©sentation Jeu de donn√©es Cityscapes", "üîÑ Comparaison de performances"])

# ===== ONGLET 1: PR√âSENTATION DATASET =====
with main_tab1:
    st.markdown("## üìä Analyse Exploratoire - Dataset Cityscapes")
    
    # Informations g√©n√©rales sur le dataset
    dataset_info = get_dataset_info()
    
    if dataset_info:
        # Section m√©thodologique
        st.markdown("""
        ### üéØ Note M√©thodologique : Preuve de concept SegFormer vs FPN

        #### Dataset retenu

        **Cityscapes Dataset : R√©f√©rence en Segmentation Urbaine**

        Le **Cityscapes Dataset** constitue la r√©f√©rence internationale pour l'√©valuation des algorithmes de segmentation s√©mantique en environnement urbain. D√©velopp√© par l'Universit√© de T√ºbingen et Mercedes-Benz, ce dataset comprend **25,000 images** haute r√©solution (2048√ó1024 pixels) captur√©es dans 50 villes allemandes et suisses.
        """)
        
        # Composition du dataset
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üóÇÔ∏è Composition du dataset :**")
            splits_info = dataset_info.get('splits', {})
            for split_name, split_info in splits_info.items():
                st.write(f"‚Ä¢ **{split_name.title()}** : {split_info['images']} images - {split_info['usage']}")
        
        with col2:
            st.markdown("**üî¨ Utilisation pour ce projet :**")
            project_splits = dataset_info.get('project_splits', {})
            for split_name, split_info in project_splits.items():
                st.write(f"‚Ä¢ **{split_name.title()}** : {split_info['images']} images ({split_info['percentage']}%) - {split_info['source']}")
        
        # Architecture des classes
        st.markdown("### üèóÔ∏è Architecture de classes hi√©rarchique")
        st.markdown("""
        Le dataset organise 34 classes d√©taill√©es en **8 m√©ta-classes** pour la segmentation :

        | M√©ta-classe | Description | Importance |
        |-------------|-------------|------------|
        | **Flat** | Route, trottoir, parkings | Navigation de base |
        | **Human** | Pi√©ton, cycliste | **S√©curit√© critique** |
        | **Vehicle** | Voiture, camion, bus, train | Obstacles dynamiques |
        | **Construction** | B√¢timent, mur, cl√¥ture, pont | Structure urbaine |
        | **Object** | Poteau, feu, panneau | Signal√©tique |
        | **Nature** | V√©g√©tation, terrain | Environnement |
        | **Sky** | Ciel | Contexte |
        | **Void** | Zones non-d√©finies | Exclusion |
        """)
        
        # Graphique de r√©partition des classes
        st.markdown("### üìä R√©partition des classes dans le dataset d'entra√Ænement")
        
        class_repartition_data = get_class_repartition()
        if class_repartition_data:
            try:
                class_repartition_image = Image.open(io.BytesIO(class_repartition_data))
                st.image(
                    class_repartition_image,
                    caption="Distribution des classes dans les images d'entra√Ænement Cityscapes",
                    use_container_width=True
                )
            except Exception as e:
                st.warning("Impossible d'afficher le graphique de r√©partition des classes")
        else:
            st.info("Graphique de r√©partition des classes non disponible")
        
        # Sp√©cificit√©s techniques
        st.markdown("""
        ### ‚öôÔ∏è Sp√©cificit√©s techniques

        - **R√©solutions d'acquisition** : Donn√©es natives 2048√ó1024 pixels
        - **Conditions d'acquisition** : Conditions m√©t√©o bonnes √† moyennes, pas de conditions adverses (pluie, neige)
        - **Diversit√© g√©ographique** : Villes allemandes et suisses (architectures vari√©es)  
        - **Annotations pixel-perfect** : Masques de segmentation pr√©cis au pixel pr√®s

        Ce dataset permet d'√©valuer la capacit√© des mod√®les √† comprendre les sc√®nes urbaines complexes, √©l√©ment fondamental pour les applications de conduite autonome et de surveillance urbaine intelligente.
        """)
    
    # Section preprocessing des images
    st.markdown("---")
    st.markdown("### üîß Exemple de Preprocessing d'Images")
    
    # R√©cup√©rer les images d'entra√Ænement disponibles
    train_data = get_train_images()
    if train_data and train_data['images']:
        # S√©lecteur d'image
        image_options = {img['display_name']: img['filename'] for img in train_data['images']}
        selected_display_name = st.selectbox(
            "Choisissez une image d'entra√Ænement pour voir les transformations:",
            options=list(image_options.keys()),
            help=f"{train_data['total_count']} images disponibles"
        )
        
        selected_filename = image_options[selected_display_name]
        
        # Options de preprocessing
        col1, col2 = st.columns(2)
        with col1:
            show_augmentation = st.checkbox(
                "Inclure l'augmentation al√©atoire",
                help="Affiche un exemple d'augmentation de donn√©es utilis√©e pendant l'entra√Ænement"
            )
        
        with col2:
            if st.button("üîß Appliquer le Preprocessing", type="primary"):
                with st.spinner("Application des transformations..."):
                    result = preprocess_train_image(selected_filename, show_augmentation)
                    
                    if result and result['success']:
                        st.success("Preprocessing termin√©!")
                        
                        # Affichage des images transform√©es
                        st.markdown("#### R√©sultats des transformations :")
                        
                        cols = st.columns(3 if show_augmentation else 2)
                        
                        # Image originale
                        with cols[0]:
                            st.markdown("**Image Originale (redimensionn√©e)**")
                            if result.get('original_image'):
                                original_img_data = base64.b64decode(result['original_image'])
                                original_img = Image.open(io.BytesIO(original_img_data))
                                st.image(original_img, use_container_width=True)
                        
                        # Image normalis√©e
                        with cols[1]:
                            st.markdown("**Apr√®s Normalisation**")
                            if result.get('normalized_image'):
                                normalized_img_data = base64.b64decode(result['normalized_image'])
                                normalized_img = Image.open(io.BytesIO(normalized_img_data))
                                st.image(normalized_img, use_container_width=True)
                        
                        # Image avec augmentation (si demand√©e)
                        if show_augmentation and result.get('augmented_image'):
                            with cols[2]:
                                st.markdown("**Avec Augmentation Al√©atoire**")
                                augmented_img_data = base64.b64decode(result['augmented_image'])
                                augmented_img = Image.open(io.BytesIO(augmented_img_data))
                                st.image(augmented_img, use_container_width=True)
                        
                        # Explications des transformations
                        if result.get('transformations_applied'):
                            st.markdown("#### üìã Transformations appliqu√©es :")
                            for i, transform in enumerate(result['transformations_applied'], 1):
                                st.markdown(f"{i}. {transform}")
                            
                            # Explications d√©taill√©es
                            with st.expander("‚ÑπÔ∏è D√©tails des transformations"):
                                st.markdown("""
                                **Normalisation standard :**
                                - Redimensionnement √† 512√ó512 pixels
                                - Normalisation des valeurs de pixels de [0-255] vers [0-1]
                                - Cette normalisation uniforme est appliqu√©e √† tous les mod√®les (param√®tre encoder non utilis√©)
                                
                                **Augmentation de donn√©es (si activ√©e) :**
                                - Transformations al√©atoires appliqu√©es pendant l'entra√Ænement
                                - Permet d'am√©liorer la robustesse et la g√©n√©ralisation du mod√®le
                                - Chaque image d'entra√Ænement peut √™tre transform√©e diff√©remment √† chaque √©poque
                                """)
                    else:
                        st.error("Erreur lors du preprocessing")
    else:
        st.warning("Aucune image d'entra√Ænement disponible pour la d√©monstration")

# ===== ONGLET 2: COMPARAISON DE PERFORMANCES =====
with main_tab2:
    # Variables de session pour les r√©sultats
    if "sample_comparison_result" not in st.session_state:
        st.session_state.sample_comparison_result = None
    if "upload_comparison_result" not in st.session_state:
        st.session_state.upload_comparison_result = None

    def reset_sample_comparison():
        st.session_state.sample_comparison_result = None

    def reset_upload_comparison():
        st.session_state.upload_comparison_result = None

    # Sous-onglets pour la comparaison
    sub_tab1, sub_tab2 = st.tabs(["üèôÔ∏è Images Test Cityscapes", "üì§ Upload Personnel"])

    # SUB-TAB 1: Images Test Cityscapes
    with sub_tab1:
        st.markdown("## üèôÔ∏è Comparaison sur Images Test Cityscapes")
        st.markdown("Comparez les performances des deux mod√®les sur des images Cityscapes avec masques de v√©rit√©.")
        
        # R√©cup√©rer les images d'exemple
        sample_data = get_sample_images()
        if sample_data and sample_data['images']:
            # S√©lecteur d'image
            image_options = {img['display_name']: img['filename'] for img in sample_data['images']}
            selected_display_name = st.selectbox(
                "Choisissez une image:",
                options=list(image_options.keys()),
                help=f"{sample_data['total_count']} images disponibles"
            )
            
            selected_filename = image_options[selected_display_name]
            
            # Afficher les infos de l'image s√©lectionn√©e
            selected_img_info = next(img for img in sample_data['images'] if img['filename'] == selected_filename)
            
            col1, col2 = st.columns([2, 1])
            with col1:
                st.info(f"üìÅ **Fichier:** {selected_filename}")
            with col2:
                ground_truth_status = "‚úÖ Disponible" if selected_img_info['has_ground_truth'] else "‚ùå Non disponible"
                st.info(f"üéØ **V√©rit√© terrain:** {ground_truth_status}")
            
            # Pr√©visualisation de l'image s√©lectionn√©e
            if selected_filename:
                try:
                    image_url = f"{API_BASE_URL}/sample-image/{selected_filename}"
                    response = requests.get(image_url, timeout=5)
                    
                    if response.status_code == 200:
                        sample_image = Image.open(io.BytesIO(response.content))
                        st.image(
                            sample_image, 
                            caption=f"Aper√ßu: {selected_display_name}", 
                            use_container_width=True
                        )
                except:
                    st.info("üì∑ Aper√ßu non disponible - L'image sera charg√©e lors de la comparaison")
            
            # Bouton de comparaison
            if st.button("üîÑ Lancer la Comparaison", key="compare_sample", type="primary"):
                if selected_filename:
                    with st.spinner("Comparaison en cours..."):
                        result = compare_sample_image(selected_filename)
                        if result and result['success']:
                            st.session_state.sample_comparison_result = result
                            st.success("‚úÖ Comparaison termin√©e!")
                            st.rerun()
                        else:
                            st.error("‚ùå Erreur lors de la comparaison")
        else:
            st.warning("Aucune image d'exemple disponible")

        # Affichage des r√©sultats de comparaison
        if st.session_state.sample_comparison_result:
            st.markdown("---")
            models_info = get_models_info()
            display_comparison_results(st.session_state.sample_comparison_result, models_info)
            
            # Bouton de reset
            if st.button("üîÑ Nouvelle Comparaison", key="reset_sample", type="secondary"):
                reset_sample_comparison()
                st.rerun()

    # SUB-TAB 2: Upload Personnel
    with sub_tab2:
        st.markdown("## üì§ Comparaison sur Image Personnelle")
        st.markdown("Uploadez une image pour comparer les performances des deux mod√®les.")
        
        uploaded_file = st.file_uploader(
            "S√©lectionnez une image:",
            type=['jpg', 'jpeg', 'png'],
            help="Taille maximale recommand√©e: 5MB"
        )
        
        if uploaded_file is not None:
            # Afficher l'image upload√©e
            image = Image.open(uploaded_file)
            st.image(image, caption=f"Image upload√©e: {uploaded_file.name}", use_container_width=True)
            
            # Informations sur le fichier
            file_size_mb = len(uploaded_file.getvalue()) / 1024 / 1024
            st.info(f"üìÅ **Fichier:** {uploaded_file.name} | üìä **Taille:** {file_size_mb:.2f} MB")
            
            # Bouton de comparaison
            if st.button("üîÑ Lancer la Comparaison", key="compare_upload", type="primary"):
                with st.spinner("Comparaison en cours..."):
                    result = compare_uploaded_image(uploaded_file)
                    if result and result['success']:
                        st.session_state.upload_comparison_result = result
                        st.success("‚úÖ Comparaison termin√©e!")
                        st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la comparaison")

        # Affichage des r√©sultats de comparaison
        if st.session_state.upload_comparison_result:
            st.markdown("---")
            models_info = get_models_info()
            display_comparison_results(st.session_state.upload_comparison_result, models_info)
            
            # Bouton de reset
            if st.button("üîÑ Nouvelle Comparaison", key="reset_upload", type="secondary"):
                reset_upload_comparison()
                st.rerun()

# Sidebar avec informations des mod√®les
with st.sidebar:
    st.markdown("## üîß Informations des Mod√®les")
    
    models_info = get_models_info()
    if models_info:
        st.success("‚úÖ Mod√®les charg√©s")
        
        # Mod√®le 1
        best_model = models_info.get('best_model', {})
        st.markdown("**ü•á Meilleur Mod√®le:**")
        st.write(f"**Architecture:** {best_model.get('architecture', 'N/A')}")
        st.write(f"**Encoder:** {best_model.get('encoder_name', 'N/A')}")
        st.write(f"**R√©solution:** {best_model.get('input_size', 'N/A')}")
        
        # Mod√®le 2
        second_model = models_info.get('second_best_model', {})
        st.markdown("**ü•à Deuxi√®me Mod√®le:**")
        st.write(f"**Architecture:** {second_model.get('architecture', 'N/A')}")
        st.write(f"**Encoder:** {second_model.get('encoder_name', 'N/A')}")
        st.write(f"**R√©solution:** {second_model.get('input_size', 'N/A')}")
    else:
        st.error("‚ùå Mod√®les non disponibles")

    st.markdown("---")
    st.markdown("## üéØ Classes Segment√©es (IoU)")
    
    # Affichage avec carr√©s color√©s et IoU
    if models_info and 'class_names' in models_info and 'class_colors' in models_info:
        class_names = models_info['class_names']
        class_colors = models_info['class_colors']
        
        # R√©cup√©rer les IoU des mod√®les
        best_ious = best_model.get('class_ious', {}) if models_info else {}
        second_ious = second_model.get('class_ious', {}) if models_info else {}
        
        for i, (class_name, color) in enumerate(zip(class_names, class_colors)):
            color_hex = f"#{color[0]:02x}{color[1]:02x}{color[2]:02x}"
            
            # Construire la cha√Æne IoU
            iou_str = ""
            if best_ious.get(class_name) is not None and second_ious.get(class_name) is not None:
                best_iou = best_ious[class_name]
                second_iou = second_ious[class_name]
                iou_str = f" (ü•á{best_iou:.2f} - ü•à{second_iou:.2f})"
            elif best_ious.get(class_name) is not None:
                best_iou = best_ious[class_name]
                iou_str = f" (ü•á{best_iou:.2f})"
            elif second_ious.get(class_name) is not None:
                second_iou = second_ious[class_name]
                iou_str = f" (ü•à{second_iou:.2f})"
            
            st.markdown(f"""
            <div style="
                display: flex;
                align-items: center;
                gap: 0.5rem;
                margin: 0.3rem 0;
                font-size: 0.85rem;
            ">
                <div style="
                    width: 14px;
                    height: 14px;
                    background-color: {color_hex};
                    border-radius: 2px;
                    border: 1px solid rgba(0,0,0,0.2);
                    flex-shrink: 0;
                "></div>
                <span style="font-weight: 500;">{i}. {class_name}{iou_str}</span>
            </div>
            """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 1rem;">
    üöó <strong>Street Vision - Comparaison de Mod√®les</strong> - 
    √âvaluation comparative de mod√®les de segmentation s√©mantique<br>
    <small>D√©velopp√© avec FastAPI, Streamlit et PyTorch</small>
</div>
""", unsafe_allow_html=True)